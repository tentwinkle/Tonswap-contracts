#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include

$1 parse-workchain-id =: wc
$2 =: token_address_raw
$3 =: token_admin_raw
$4 parse-int =: token_alloc_points
$5 =: protocl_admin_raw
$6 parse-int =: protocol_alloc_points
$7 =: name
$8 =: symbol


//   Constants V1=SHOULD BE REPALCED BY THE VERSION
"LPT" constant tokensymbol
0 constant initial_supply

token_admin_raw  load-address 2dup 2constant token_admin
token_address_raw  load-address 2dup 2constant token_address
protocl_admin_raw  load-address 2dup 2constant protocl_admin

"build/dex.fif" include =: code

0 =: init_liquidity

null =: balances
null =: allowed
null =: credits

<b token_admin addr,
   token_alloc_points Gram,
   protocl_admin addr,
   protocol_alloc_points Gram,
b> =: admin_data

<b name $len 8 u,
   name $,
   symbol $len 8 u,
   symbol $,
   9 8 u, // deciamls
   0 Gram, // total supply
   0 Gram, // token_reserves
   0 Gram, // ton_reserves
   null dict, // balances
   null dict, // allowances
   token_address addr, // token_address
   0 1 u, // un initaliised
   admin_data ref,
b> =: data
null =: libs

<b b{0011} s, code ref, data ref, libs dict, b> =: state_init

state_init hashu wc swap 2dup 2constant contract_addr

."token admin = " token_admin .addr cr
name type ." address = " 2dup .addr cr
2dup name +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr

<b b{0} s, b>  =: init_msg

<b b{1000100} s, contract_addr addr, b{000010} s, state_init <s s, b{0} s, init_msg <s s, b> =: external_msg
external_msg 2 boc+>B
name +".boc" tuck B>file
."(Saved dex creating query to file " type .")" cr

