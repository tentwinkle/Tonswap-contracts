#!/usr/bin/env fift -s
"TonUtil.fif" include
"Asm.fif" include



$1 parse-workchain-id =: wc
$2 =: token_a_addr_file
$3 =: token_b_addr_file
$4 =: owner_addr_file
$5 =: tokenname


//   Constants V1=SHOULD BE REPALCED BY THE VERSION
"LPT" constant tokensymbol
3 constant initial_supply



//   Load addresses from file

token_a_addr_file load-address 2dup 2constant token_a_addr
token_b_addr_file load-address 2dup 2constant token_b_addr
owner_addr_file load-address 2dup 2constant owner_addr


//   Read code to be deployed
"build/dex.fif" include =: code

7500000000 =: init_liquidity

//   Setup the balances dictornary and allocate the total 
//   supply to be owned by the owner_addr
null =: balances
null =: allowed
null =: credits

<b tokenname $len 8 u,
   tokenname $,
   tokensymbol $len 8 u,
   tokensymbol $,
   token_a_addr addr, // USDC Contract
   token_b_addr addr, // KILO Contract 
   18 8 u, // decimals
   0 Gram, // total supply
   init_liquidity Gram, // reserveA
   init_liquidity Gram, // reserveB
   balances dict, // balances 
   null dict, // approvals
   null dict, // credits
   0 1 u, // un initaliised 
b> =: data


null =: libs

<b b{0011} s, code ref, data ref, libs dict, b> =: state_init

state_init hashu wc swap 2dup 2constant contract_addr

."owner address = " owner_addr .addr cr
tokenname type ." address = " 2dup .addr cr
2dup tokenname +".addr" save-address-verbose
."Non-bounceable address (for init): " 2dup 7 .Addr cr
."Bounceable address (for later access): " 6 .Addr cr

<b  b> =: init_msg

<b b{1000100} s, contract_addr addr, b{000010} s, state_init <s s, b{0} s, init_msg <s s, b> =: external_msg
external_msg 2 boc+>B
tokenname +".boc" tuck B>file
."(Saved dex creating query to file " type .")" cr
