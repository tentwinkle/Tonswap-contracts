#include "stdlib.fc";
#include "op-codes-amm.fc";
#include "params.fc";
#include "amm-utils.fc";
#include "amm-minter-utils.fc";

int jetton_storage() asm "50000000 PUSHINT"; ;; 0.05 TON
int add_liquidity_dust() asm "100000000 PUSHINT"; ;; 0.1 TON

;; storage scheme
;; storage#_ total_supply:Coins token_wallet_address:MsgAddress content:^Cell jetton_wallet_code:^Cell = Storage;

(int, slice, int, int, cell, cell) load_data() inline {
  slice ds = get_data().begin_parse();
  return (
      ds~load_coins(),      ;; total_supply
      ds~load_msg_addr(),   ;; token_wallet_address
      ds~load_coins(),      ;; ton_reserves
      ds~load_coins(),      ;; token_reserves
      ds~load_ref(),        ;; content (uri to json)
      ds~load_ref()       ;; jetton_wallet_code
  );
}

() save_data(int total_supply, slice token_wallet_address, int ton_reserves, int token_reserves, cell content, cell jetton_wallet_code) impure inline {
  set_data(begin_cell()
            .store_coins(total_supply)
            .store_slice(token_wallet_address)
            .store_coins(ton_reserves)
            .store_coins(token_reserves)
            .store_coins(total_supply)
            .store_ref(content)
            .store_ref(jetton_wallet_code)
           .end_cell()
          );
}


const zerro_address = "EQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM9c"a;


() mint_tokens(slice to_address, cell jetton_wallet_code, int amount, cell master_msg) impure {
  
  cell state_init = calculate_jetton_wallet_state_init(to_address, my_address(), jetton_wallet_code);
  slice to_wallet_address = calculate_jetton_wallet_address(state_init);
  var msg = begin_cell()
    .store_uint(0x18, 6)
    .store_slice(to_wallet_address)
    .store_coins(jetton_storage())
    .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
    .store_ref(state_init)
    .store_ref(master_msg);
  send_raw_message(msg.end_cell(), 1); ;; pay transfer fees separately, revert on errors
}


() add_liquidity(slice in_msg_body, int jetton_amount, slice jetton_sender, int msg_value, slice sender_address, int fwd_fee, int query_id) impure {

    (int total_supply, slice token_wallet_address, int ton_reserves, int token_reserves, cell content, cell jetton_wallet_code) = load_data();

    int slipage = in_msg_body~load_uint(32);
    int ton_liquidity = in_msg_body~load_grams();

    if (0 == jetton_amount) | (msg_value == 0) | slipage > 100 {
        revert_add_liquidity(ton_liquidity, jetton_amount, token_wallet_address, jetton_sender, query_id);
        return ();
    }

    if (ton_liquidity <= msg_value - (fwd_fee + jetton_storage())) | ton_liquidity < add_liquidity_dust() {
        revert_add_liquidity(ton_liquidity, jetton_amount, token_wallet_address, jetton_sender, query_id);
        return ();
    }

    if ton_reserves > 0 {
        int optimal_ton = quote(jetton_amount, token_reserves, ton_reserves);
        int optimal_jetton = quote(ton_liquidity, ton_reserves, token_reserves);

        int ton_liquidity_min = ton_liquidity * ( 100 - slipage ) / 100;
        int jeton_liquidity_min = jetton_amount * ( 100 - slipage ) / 100;

        if( ( optimal_ton <= ton_liquidity_min ) | (optimal_jetton <= jeton_liquidity_min) ) {
            revert_add_liquidity(ton_liquidity, jetton_amount, token_wallet_address, jetton_sender, query_id);
        } else {
            int extra_ton = ton_liquidity - optimal_ton;
            int extra_jeton = jetton_amount - optimal_jetton;

            ;; return extra's
            if extra_jeton > add_liquidity_dust() {
                send_transfer_token_message(query_id, token_wallet_address, jetton_sender, extra_jeton);        
            }
            if extra_ton > add_liquidity_dust() {
                send_grams(jetton_sender ,extra_ton);
            }
        }
    }

    (int new_liquidity, total_supply, ton_reserves, token_reserves) = mint_lp(ton_liquidity ,jetton_amount ,ton_reserves, token_reserves, total_supply);
                                                                ;;TODO should put null instead of payload
    ;; end wallet is expecting the amount and owner,
    cell mint_msg = begin_cell()
    .store_uint(op::internal_transfer(), 32)
    .store_uint(query_id, 64)
    .store_coins(new_liquidity)
    .store_slice(jetton_sender) ;; 
    .store_slice(jetton_sender) ;; response_destination -> the address should get the jetton leftovers
    .store_coins(0)
    .store_uint(0, 1)
    .end_cell();

    ;; token_wallet_address  Starts as zeroAddress, and the first add-liuditiy sets the Amm's jetton wallet address (token_wallet_address)
    if equal_slices(token_wallet_address, zerro_address) {
        token_wallet_address = sender_address;
    }

    mint_tokens(jetton_sender, jetton_wallet_code, new_liquidity, mint_msg);
    save_data(total_supply, token_wallet_address, ton_reserves, token_reserves, content, jetton_wallet_code);
    return ();
}


() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
      return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) {
      return ();
    }
    slice sender_address = cs~load_msg_addr();
    cs~load_msg_addr(); ;; skip dst
    cs~load_coins(); ;; skip value
    cs~skip_bits(1); ;; skip extracurrency collection
    cs~load_coins(); ;; skip ihr_fee
    int fwd_fee = cs~load_coins(); ;; we use message fwd_fee for estimation of forward_payload costs    

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (int total_supply, slice token_wallet_address, int ton_reserves, int token_reserves, cell content, cell jetton_wallet_code) = load_data();

    if (op == op::burn_notification()) {
        int jetton_amount = in_msg_body~load_coins();
        slice from_address = in_msg_body~load_msg_addr();
        int share_in_ton_reserves = (jetton_amount * ton_reserves) / total_supply;
        int share_in_token_reserves = (jetton_amount * token_reserves) / total_supply;

        throw_unless(74,
            equal_slices(calculate_user_jetton_wallet_address(from_address, my_address(), jetton_wallet_code), sender_address)
        );
        
        send_transfer_token_message(query_id, token_wallet_address, from_address, share_in_token_reserves);        
        send_grams(from_address ,share_in_ton_reserves);
        save_data(total_supply - jetton_amount, token_wallet_address, ton_reserves - share_in_ton_reserves, token_reserves - share_in_token_reserves, content, jetton_wallet_code);
        
        return ();
    }

    if (op == op::swap_ton() ) {
        
        int ton_to_swap = in_msg_body~load_coins();
        int min_amount_out = in_msg_body~load_coins();
        
        throw_if(600, min_amount_out > token_reserves); ;;insufficent liquidity
        throw_if(601, 0 == token_reserves); ;; insufficent liquidity
        throw_if(602, equal_slices(token_wallet_address, zerro_address) ); ;; pool is not intialized 
        
        (ton_reserves, token_reserves) = swapTokens(min_amount_out, ton_to_swap, true, sender_address, ton_reserves, token_reserves, token_wallet_address, query_id);
        save_data(total_supply, token_wallet_address, ton_reserves, token_reserves, content, jetton_wallet_code);
        return ();
    }

    ;; transfer_notification#7362d09c query_id:uint64 amount:(VarUInteger 16) 
    ;;                          sender:MsgAddress forward_payload:(Either Cell ^Cell)
    ;;                          = InternalMsgBody

    if (op == op::transfer_notification() ) {
      int jetton_amount = in_msg_body~load_coins();
      slice jetton_sender = in_msg_body~load_msg_addr();
      int noPayload = in_msg_body~load_uint(1); 
      if (noPayload == -1 ) {
        return ();
      }

      ;; accept add-liquidity and swap actions only from token_wallet_address
      ;;  if token_wallet_address != null && token_wallet_address != sender_address -> throw
      if (equal_slices(token_wallet_address, zerro_address) == false) & (equal_slices(token_wallet_address, sender_address) == false) {
        throw_if(76, true);
      }
      
      int sub_op = in_msg_body~load_uint(32);
      
      if( sub_op == op::add_liquidity() ) {
        add_liquidity(in_msg_body ,jetton_amount, jetton_sender ,msg_value, sender_address ,fwd_fee, query_id);
        return ();
      }

      if (sub_op == op::swap_token() ) {  ;; swap TRC20 -> TON
          ;; bonuce message will be handled properly by the jetton sender
          throw_if(75, equal_slices(token_wallet_address, zerro_address));
          int min_amount_out = in_msg_body~load_grams();
          (ton_reserves, token_reserves) = swapTokens(min_amount_out, jetton_amount, false, jetton_sender, ton_reserves, token_reserves, token_wallet_address, query_id);
          save_data(total_supply, token_wallet_address, ton_reserves, token_reserves, content, jetton_wallet_code);
          return ();
      }
      return ();
    }


    throw(0xffff);
}




(int, int, slice, int, int, cell, cell) get_jetton_data() method_id {
    (int total_supply, slice token_wallet_address, int ton_reserves, int token_reserves, cell content, cell jetton_wallet_code) = load_data();
    return (total_supply, -1, token_wallet_address, ton_reserves, token_reserves, content, jetton_wallet_code);
}

slice get_wallet_address(slice owner_address) method_id {
    (int total_supply, slice token_wallet_address, int ton_reserves, int token_reserves, cell content, cell jetton_wallet_code) = load_data();
    return calculate_user_jetton_wallet_address(owner_address, my_address(), jetton_wallet_code);
}
